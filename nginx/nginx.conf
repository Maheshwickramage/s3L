events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

    # Real IP configuration for Cloudflare
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    real_ip_header CF-Connecting-IP;

    # Backend API Server (api.s3learn.com)
    server {
        listen 80;
        server_name api.s3learn.com;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # CORS configuration
        location / {
            # Determine allowed origin based on request
            set $cors_origin "";
            if ($http_origin ~* ^https://s3learn\.com$) {
                set $cors_origin "https://s3learn.com";
            }
            if ($http_origin ~* ^https://www\.s3learn\.com$) {
                set $cors_origin "https://www.s3learn.com";
            }
            if ($http_origin ~* ^http://localhost(:\d+)?$) {
                set $cors_origin $http_origin;
            }

            # Set CORS headers for all requests
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Cache-Control, Content-Type, X-Requested-With' always;

            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Cache-Control, Content-Type, X-Requested-With' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }

            # Apply rate limiting to API calls
            limit_req zone=api burst=20 nodelay;
            
            # Proxy to backend
            proxy_pass http://backend:5050;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Health check endpoint
        location /health {
            # Determine allowed origin based on request
            set $cors_origin "";
            if ($http_origin ~* ^https://s3learn\.com$) {
                set $cors_origin "https://s3learn.com";
            }
            if ($http_origin ~* ^http://localhost(:\d+)?$) {
                set $cors_origin $http_origin;
            }
            
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            proxy_pass http://backend:5050/api/health;
            access_log off;
        }
    }

    # Frontend Server (s3learn.com)
    server {
        listen 80;
        server_name s3learn.com www.s3learn.com;
        
        # Root directory
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Handle React Router (single page application)
        location / {
            try_files $uri $uri/ /index.html;
            
            # Cache control for HTML files
            location ~* \.html$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
        }

        # Static assets with longer cache
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Gzip static assets
            gzip_static on;
        }

        # Favicon and manifest files
        location ~* \.(ico|png|svg|webp)$ {
            expires 1M;
            add_header Cache-Control "public, immutable";
        }

        # API calls should go to api subdomain
        location /api/ {
            return 301 https://api.s3learn.com$request_uri;
        }

        # Health check endpoint for frontend
        location /health {
            return 200 'Frontend healthy\n';
            add_header Content-Type text/plain;
            access_log off;
        }

        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Catch-all server for invalid hosts
    server {
        listen 80 default_server;
        server_name _;
        return 444;
    }
}
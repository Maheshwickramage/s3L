version: '3.8'

services:
  # Backend API Service
  backend:
    build: ./backend
    container_name: s3learn-backend
    restart: unless-stopped
    expose:
      - "5050"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
    env_file:
      - .env
    networks:
      - s3learn-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${PORT}/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service (React + Nginx)
  frontend:
    build: ./frontend
    container_name: s3learn-frontend
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - s3learn-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:latest
    container_name: s3learn-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - ./certbot/certs:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    networks:
      - s3learn-network

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: s3learn-certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/certs:/etc/letsencrypt
    entrypoint: sh -c "sleep 6"

networks:
  s3learn-network:
    driver: bridge
